# Para configurar la rama inicial, puede ser comunmente main
git config --global init.defaultBranch <branch_name> 

# Para iniciar un repositorio Git
git init

# Para renombrar una rama
git -branch <branch_name>

# Agregar archivos al repositorio
git add <file_name>

# Agregar el commit de la última modificación
git commit -m "<mensaje>"

# Configurar un usuario de Git
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

# Agregar todos los archivos dentro del repositorio
git ad .

# Mostrar el Estado del repositorio
git status

# Mostrar todas las modificaciones y quién las ha hecho del repositorio
git show

# Muestra todo el log de un archivo del repositorio
git log <file_name>

# Ramas comunes en Git
- Main (a veces también llamada Master) sería la rama principal del proyecto
- Development (Rama de desarrollo, de realizar pruebas)
- HotFix (Rama de corregir errores presentes en entornos productivos

# Para fusionar ramas o branches de los repositorios
merge

# Para comparar las cambios en las diferentes versiones
git diff <num1_commit> <num2_commit>

# Los estados dentro de Git
- Directorio: El primer estado aquí es el untracked que significa que no se ha trazado o modificado el archivo aún

git add <file_name>

- Staging: Que el archivo ha sido trackeado por el comando 'git add' y se encuentra en la memoria ram

git commit -m "<mensaje>"

- Repositorio: Que el archivo ya ha sido agregado al repositorio por el comando 'git commit -m'

# Para traer los cambios que están en el repositorio, pero no en el directorio local
checkout

# Hacer Commits con add directamente
git commit -am "<commit_mensage>"
git commit -a # Abre un archivo de texto para insertar el commit


# Crear branches o ramas
git branch <branch_name>

# Ir a la branch
git checkout <branch_name>

# Para fusionar ambas ramas, se posiciona sobra la rama que se quiere como principal y se trae la otra rama.
git merge <branch_to_add>

# Para usar un repositorio remoto
git remote add origin <url_git_repoitory>

# Muestra los repositorios remotos
git remote

# Muestra los repositorios remotos de forma verbal
git remote -v

# Enviar al repositorio remoto lo que tenemos en la rama <branch_to_send>
git push origin <branch_to_send>

# Traer desde el repositorio remoto 'origin' al repositorio local
git pull origin <main>

# Crear llave SSH
ssh-keygen -t rsa -b 4096 -C "<user_mail_remote_repoitory>"

# Para verificar que se está ejecutando el conjunto de llaves SSH que tenemos registradas, mandamos
eval $(ssh-agent -s)

# Para agregar la llave al agente
ssh-add <route_of_private_ssh_key>

# Revisar el historial como Ramas en Git
git log --all --graph --decorate --oneline

# Realizar TAGs para señalar versiones del Repossitorio
git tag -a <v0.1> -m "<mesage_here>" <hash> # El hash es el mismo número del commit

# Revisar las tags que se tienen
git tag

# Revisar los hash completos de los tags
git show-ref --tags

# Agregar Tags al repositorio remoto
git push origin --tags

# Eliminar un tag
git tag -d <tag_to_delete>

# Eliminar en el repositorio remoto
git push origin :refs/tags/<tag_to_delete>

# Mostrar toda la historia de ramas
git show-branch --all

### Para trabajar con Forks:
#1. Se debe crear un fork del proyecto al cual se debe contribuir
#2. Se debe agregar una nueva fuente diferente a Origin para actualizarla de la fuente original, generalmente se llama upstream
git remote add upstream <url_parent_fork> # La palabra upstream puede cambiar

#Para actualizar nuestro repositorio desde el Fork parent
git pull upstream main

#Para subir los cambios a nuestro fork
git push origin main

# Usar rebase para sobreescribir una rama externa a la rama main, sin dejar historial de esta rama, se hace desde la rama externa
git rebase main

# 1. Se hace rebase de la rama externa
# 2. Se hace rebase desde la rama main
git rebase <extra_branch>

# Devolver los estados hasta donde no se ha modificado ninguna rama en Git
git stash
git stash list
git stash pop # Para volver a los cambios previos de aplicar 'stash'
git stash branch <new_branch> # envía los nuevos cambios del 'stash' a una nueva rama
# En la nueva rama, se tiene que hacer 'commit' y 'add' para agregar los cambios 'stasheados' a la nueva branch
git stash drop #Elimina los 'stashes' existentes


# Limpiar de archivos que no se han agregado y no se han añadido
git clean --dry-run
git clean -f

# Corregir el último commit realizado agregando al nuevo commit
# 1. Se debe usar el 'git add <file_name> primero
git commit --amend


